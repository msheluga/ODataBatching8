// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using EFSecurity.Models;

namespace EFSecurity.Data
{
    public partial class PermissionContext : DbContext
    {
        public PermissionContext(DbContextOptions<PermissionContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ApplicationPermissionGroup> ApplicationPermissionGroups { get; set; }
        public virtual DbSet<ApplicationRequest> ApplicationRequests { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<E920apis> E920apis { get; set; }
        public virtual DbSet<E920claims> E920claims { get; set; }
        public virtual DbSet<E920tableFields> E920tableFields { get; set; }
        public virtual DbSet<E920tables> E920tables { get; set; }
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<OrganizationClaim> OrganizationClaims { get; set; }
        public virtual DbSet<PermissionGroup> PermissionGroups { get; set; }
        public virtual DbSet<PermissionGroupE920tableFields> PermissionGroupE920tableFields { get; set; }
        public virtual DbSet<PermissionGroupE920tables> PermissionGroupE920tables { get; set; }
        public virtual DbSet<RequestedSystemDetail> RequestedSystemDetails { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ApplicationPermissionGroup>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.ApplicationRequest)
                    .WithMany(p => p.ApplicationPermissionGroups)
                    .HasForeignKey(d => d.ApplicationRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.PermissionGroup)
                    .WithMany(p => p.ApplicationPermissionGroups)
                    .HasForeignKey(d => d.PermissionGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<ApplicationRequest>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.ApplicationRequests)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.RequestedSystemDetails)
                    .WithMany(p => p.ApplicationRequests)
                    .HasForeignKey(d => d.RequestedSystemDetailsId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<AspNetUser>(entity =>
            {
                entity.HasMany(d => d.Roles)
                    .WithMany(p => p.Users)
                    .UsingEntity<Dictionary<string, object>>(
                        "AspNetUserRole",
                        l => l.HasOne<AspNetRole>().WithMany().HasForeignKey("RoleId"),
                        r => r.HasOne<AspNetUser>().WithMany().HasForeignKey("UserId"),
                        j =>
                        {
                            j.HasKey("UserId", "RoleId");

                            j.ToTable("AspNetUserRoles");
                        });
            });

            modelBuilder.Entity<AspNetUserLogin>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });
            });

            modelBuilder.Entity<AspNetUserToken>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<E920apis>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<E920claims>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<E920tableFields>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.E920table)
                    .WithMany(p => p.E920tableFields)
                    .HasForeignKey(d => d.E920tableId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<E920tables>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<Organization>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<OrganizationClaim>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Claim)
                    .WithMany(p => p.OrganizationClaims)
                    .HasForeignKey(d => d.ClaimId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationClaims_Claims");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.OrganizationClaims)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationClaims_Organization");
            });

            modelBuilder.Entity<PermissionGroup>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<PermissionGroupE920tableFields>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.E920tableField)
                    .WithMany(p => p.PermissionGroupE920tableFields)
                    .HasForeignKey(d => d.E920tableFieldId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.PermissionGroupE920table)
                    .WithMany(p => p.PermissionGroupE920tableFields)
                    .HasForeignKey(d => d.PermissionGroupE920tableId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<PermissionGroupE920tables>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.E920table)
                    .WithMany(p => p.PermissionGroupE920tables)
                    .HasForeignKey(d => d.E920tableId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.PermissionGroup)
                    .WithMany(p => p.PermissionGroupE920tables)
                    .HasForeignKey(d => d.PermissionGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<RequestedSystemDetail>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}